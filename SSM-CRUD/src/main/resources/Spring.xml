<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--配置扫描包名-->
    <context:component-scan base-package="com.ghc.ssm">
        <!--配置除了控制器不扫-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入jdbc.properties配置文件信息-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--Spring的配置文件，配置与业务逻辑有关的-->
    <!--数据源，事务控制，-->
    <!--
    jdbc配置文件中用户名最好不要用username
    properties 中不能用 username 作为变量，
    这种方式会注入自己的系统环境变量的用户名，本来是root,
    不应是那个 windows用户名
    -->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${user}"></property>
        <property name="password" value="${password}"></property>
    </bean>

    <!--mybatis整合spring-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
<!--        <property name="mapperLocations" value="classpath:com/ghc/ssm/mapper/*xml"></property>-->
    </bean>

    <!--配置一个可执行批量插入的sqlSession-->
    <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>


    <!--配置扫描器，将mybatis接口实现加入到ioc容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有的dao接口-->
        <property name="basePackage" value="com.ghc.ssm.mapper"></property>
    </bean>

    <!--事务控制配置-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <!--控制数据源-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--开启基于注解的事务
    3.在service类上面（或者service类里面方法上）添加事务注解
    （1）@Transactional，这个注解添加到类上面，也可以添加方法上面
    （2）如果这个注解添加到类上面，这个类里面所有方法都添加事务
    （3）如果这个注解添加到方法上面，那只是为这个方法添加事务
    -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>


    <!--开启aspect生成代理类对象
    @Aspect  //生成代理对象  注解增强类
    @Order(1) //多个类对同一个方法进行增强  使用注解Order 数值越小优先级越高
    //相同切入点的抽取
    @Pointcut(value ="execution(* com.ghc.ssm.dao.*.*.(..))") 增强dao包类的所有类所有方法
    -->
    <aop:aspectj-autoproxy/>



</beans>